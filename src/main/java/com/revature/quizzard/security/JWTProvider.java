package com.revature.quizzard.security;

import com.revature.quizzard.dtos.AuthenticatedDTO;
import com.revature.quizzard.dtos.UserDTO;
import com.revature.quizzard.services.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

@Component
public class JWTProvider {

    private final JWTokenUtil jwTokenUtil;
    private final Map<String, Authentication> authenticationCache = new HashMap<>();
    private UserService userService;

    /**
     *  Constructor for JWTProvider
     * @param jwTokenUtil The JWT utility class to process JWT's
     * @param userService The User Service used to process the token into a valid authentication object
     * @author Nicholas Recino
     */
    @Autowired
    public JWTProvider(JWTokenUtil jwTokenUtil, UserService userService){
        this.jwTokenUtil = jwTokenUtil;
        this.userService = userService;
    }

    /**
     *  Generates a Token based upon an authentication object generated by Spring Security
     * @param authentication Authentication Token representing a User that is looking to generate a JWT token
     * @return  Returns The JWT token referencing the UserDTO that was created at this moment
     * @author Nicholas Recino &&
     */
    public String generateToken(Authentication authentication){
        String token = ""; // Needs to be set to something
        // TODO Logic needs to be written after we determine how exactly we login, IE what info gets sent over with what style

        AuthenticatedDTO userToGenerate = new AuthenticatedDTO(); // TODO User service logic to find the user from the logic above

        if(userToGenerate != null){
            token = jwTokenUtil.generateToken(userToGenerate);
        }else{
            // Either logic to throw an authentication error or to try to login to user
        }
        authenticationCache.put(token,authentication);
        return token;
    }

    /**
     *  Returns the authentication associated with a token that is stored in an active cache
     * @param token The users JWT token
     * @return The currently cached authentication that's associated with this token
     * @author Nicholas Recino
     */
    public Authentication getAuth(String token) {
        // Could be a TimeOutException but might be beyond scope
        return authenticationCache.getOrDefault(token, null);
    }
}
